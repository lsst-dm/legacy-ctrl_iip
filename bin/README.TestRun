# Description

This file describes how to run L1 Software application from a flat-iron machine
with no software packages installed or set up. 

# General Prerequisites

* One machine with rabbitmq server running. 
* Setup users on that rabbitmq machine. 
    * Add new vhost `rabbitmqctl add_vhost <vhost-name>` in 
        `$CTRL_IIP_DIR/bin/at_rmq_user_init.sh`
    * Add `rabbitmqctl set_permissions` line in the for loops at the end of file
    * Run `at_rmq_user_init.sh` to setup users
* Setup queues 
    * Add your vhost with connection to start of file in 
        `$CTRL_IIP_DIR/bin/at_Setup.py`
    * Run `$CTRL_IIP_DIR/bin/at_Setup.py` to setup queue names
* Edit `BASE_BROKER_ADDR` in `$CTRL_IIP_DIR/etc/config/L1SystemCfg.yaml` with
  your `vhost` name. `xxx.xxx.xxx.xx:5672/%2f<vhost-name>`

# Run
## DMCS

DMCS application uses `redis` database. So, the machine that is going to run DMCS
must have `redis` database.

* Redis database
* Must have python3
* Edit `L1SystemCfg.yaml` with BASE_BROKER_ADDR if you haven't.
* Create logs directory in the directory that DMCS is going to run(TODO) 
* Then run the application. 

To test DMCS, run `$CTRL_IIP_DIR/test_scripts/dmcs_sender.py` 

## AuxDevice 
AuxDevice is ATArchiver application. Same requirement with DMCS.

To test AuxDevice, run `$CTRL_IIP_DIR/test_scripts/ats_sender.py` (WIP)

## OCSBridge
OCSBridge is composed of 3 components - AckSubscriber(listener for acks from L1
System), CommandListener(listener for OCS commands) and EventSubscriber(listener
for OCS events). 

To run,
* Dependent on boost-1.63, rabbitmq-c, simpleAmqpClient, yaml-cpp libraries
* Dependent on OCS software such as libSAL_ATArchiver.so and such
* Edit `L1SystemCfg.yaml` with BASE_BROKER_ADDR if you haven't.
* make $CTRL_IIP_DIR/src/ocs/Makefile
* Run the system.
