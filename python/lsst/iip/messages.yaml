################################################################
## This is a large file, as it contains the canonical          #
## structure of every message used in the DM L1 system.        #
## To jump to a specific section, here is a set of             #
## search strings, and where they will take you.               #
##                                                             #
##                                                             #
## ob2dmcs  OCS Bridge to DMCS and back                        #
## dmcs_ev  DMCS Events to be published                        #
##                                                             #
## dmcs2ar  DMCS to archive device and back                    #
## ar2fwdr  Archive device to Forwarder and back               #
## ar2arc   Archive Device to Archive Controller and back      #
##                                                             #
## dmcs2at  DMCS to Auxiliary Telescope device and back        #
## at2fwdr  Auxiliary Telescope device to Forwarder and back   #
##                                                             #
## dmcs2pp  DMCS to Prompt Processing and back                 #
## pp2ncsa  Prompt Processing to NCSA Foreman and back         #
## pp2fwdr  Prompt Processing to Forwarder and back            #
##                                                             #
## ncsa2dist  NCSA Foreman to Distributors and back            #
## ncsa2cc  NCSA Foreman to Cluster Controller and back        #
##                                                             #
## fwdr2fwdr  Forwarder inter-thread messages                  #
##                                                             #
################################################################



ROOT:
### OCS Bridge to DMCS and Back
### ob2dmcs
###############################


    ENTER_CONTROL:        
        MSG_TYPE: ENTER_CONTROL
        DEVICE: AT, AR, PP, or CU
        CMD_ID:
        ACK_ID:

    ENTER_CONTROL_ACK:
        MSG_TYPE: ENTER_CONTROL_ACK
        DEVICE: AT, AR, PP, or CU
        CMD_ID:
        ACK_ID:
        ACK_BOOL:
        ACK_STATEMENT:

    START:
        MSG_TYPE: START
        DEVICE: AT, AR, PP, or CU
        CMD_ID:
        ACK_ID: 
        CFG_KEY:

    START_ACK:
        MSG_TYPE: START
        DEVICE: AT, AR, PP, or CU
        CMD_ID:
        ACK_ID:
        ACK_BOOL:
        ACK_STATEMENT:

    STANDBY:
        MSG_TYPE: STANDBY
        DEVICE: AT, AR, PP, or CU
        CMD_ID:
        ACK_ID:
        
    STANDBY_ACK:
        MSG_TYPE: STANDBY_ACK
        DEVICE:
        CMD_ID:
        ACK_ID:
        ACK_BOOL:
        ACK_STATEMENT:

    DISABLE:
        MSG_TYPE: DISABLE
        DEVICE:
        CMD_ID:
        ACK_ID:

    DISABLE_ACK:
        MSG_TYPE: DISABLE_ACK
        DEVICE:
        CMD_ID:
        ACK_ID:
        ACK_BOOL:
        ACK_STATEMENT:

    ENABLE:
        MSG_TYPE: ENABLE
        DEVICE:
        CMD_ID:
        ACK_ID:

    ENABLE_ACK:
        MSG_TYPE: ENABLE_ACK
        DEVICE:
        CMD_ID:
        ACK_ID:
        ACK_BOOL:
        ACK_STATEMENT:

    EXIT_CONTROL:
        MSG_TYPE: EXIT_CONTROL
        DEVICE: AT, AR, PP, or CU
        CMD_ID:
        ACK_ID:

    EXIT_CONTROL_ACK:
        MSG_TYPE: EXIT_CONTROL_ACK
        DEVICE: AT, AR, PP, or CU
        CMD_ID:
        ACK_ID:
        ACK_BOOL:
        ACK_STATEMENT:

    ABORT:
        MSG_TYPE: ABORT
        DEVICE: AT, AR, PP, or CU
        ACK_ID:
        CMD_ID: 

    ABORT_ACK:
        MSG_TYPE: ABORT_ACK
        DEVICE: AT, AR, PP, or CU
        CMD_ID: 
        ACK_ID:
        ACK_BOOL:
        ACK_STATEMENT:

    STOP:
        MSG_TYPE: STOP
        DEVICE: AT, AR, PP, or CU
        CMD_ID:
        ACK_ID:

    STOP_ACK:
        MSG_TYPE: STOP_ACK
        DEVICE: AT, AR, PP, or CU
        CMD_ID:
        ACK_ID:
        ACK_BOOL:
        ACK_STATEMENT:

    DMCS_TCS_TARGET:
        MSG_TYPE: DMCS_TCS_TARGET
        TARGET_ID: 
        FIELD_ID: 
        GROUP_ID:
        FILTER:
        REQUEST_TIME:
        RA: 
        DEC: 
        ANGLE: 
        NUM_EXPOSURES: 
        EXPOSURE_TIMES: 
        SLEW_TIME: 

    DMCS_TCS_TARGET_ACK:
        MSG_TYPE: DMCS_TCS_TARGET_ACK
        ACK_BOOL:
        ACK_IS:

    DMCS_START_INTEGRATION:
        MSG_TYPE: DMCS_START_INTEGRATION
        IMAGE_ID: seq. num
        ACK_ID:

    DMCS_START_INTEGRATION_ACK:
        MSG_TYPE: DMCS_START_INTEGRATION_ACK
        IMAGE_ID:
        DEVICE:
        ACK_BOOL:
        ACK_ID:
        ACK_DESCRIPTION: tbd, if needed

    DMCS_END_READOUT:
        MSG_TYPE: DMCS_END_READOUT
        VISIT_ID:
        IMAGE_ID:
        REPLY_QUEUE:
        ACK_ID:

    DMCS_END_READOUT_ACK:
        MSG_TYPE: DMCS_END_READOUT_ACK
        COMPONENT:
        ACK_BOOL:
        ACK_ID:

    DMCS_AT_START_INTEGRATION:
        MSG_TYPE: DMCS_AT_START_INTEGRATION
        IMAGE_ID: seq. num
        IMAGE_INDEX:
        IMAGE_SEQUENCE_NAME:
        IMAGES_IN_SEQUENCE:

    DMCS_AT_END_READOUT:
        MSG_TYPE: DMCS_AT_END_READOUT
        IMAGE_ID: 
        IMAGE_INDEX:
        IMAGE_SEQUENCE_NAME:
        IMAGES_IN_SEQUENCE:

    DMCS_AT_HEADER_READY:
        MSG_TYPE: DMCS_AT_HEADER_READY
        FILENAME:
        IMAGE_ID:

### Events published by the DMCS
### dmcs_ev
##################################

    SUMMARY_STATE_EVENT: 
        MSG_TYPE: SUMMARY_STATE_EVENT
        DEVICE:
        CURRENT_STATE:

    RECOMMENDED_SETTINGS_VERSION_EVENT:
        MSG_TYPE: RECOMMENDED_SETTINGS_VERSION_EVENT
        DEVICE:
        CFG_KEY: <device>-NORMAL

    SETTINGS_APPLIED_EVENT:
        MSG_TYPE: SETTINGS_APPLIED_EVENT
        DEVICE:
        SETTING:
        APPLIED:  (Bool)

    APPLIED_SETTINGS_MATCH_START_EVENT:
        MSG_TYPE: APPLIED_SETTINGS_MATCH_START_EVENT
        DEVICE:
        SETTING:
        APPLIED:  (Bool)

    ERROR_CODE_EVENT:
        MSG_TYPE: ERROR_CODE_EVENT
        DEVICE:
        ERROR_CODE:  (Long Int)

    FAULT:
        MSG_TYPE: FAULT
        FAULT_TYPE: FAULT, ERROR, or WARNING
        DEVICE:
        COMPONENT:
        ERROR_CODE:  (4 character string)
        DESCRIPTION:

    SYSTEM_HEALTH:
        MSG_TYPE: SYSTEM_HEALTH
        ACK_ID:

    SYSTEM_HEALTH_ACK:
        MSG_TYPE: SYSTEM_HEALTH_ACK
        ACK_BOOL: True of False
        ACK_DESCRIPTION: tbd, if needed (ACK_BOOL is False)



####################################
### DMCS to ArchiveDevice and back

    AR_NEW_SESSION:
        MSG_TYPE: AR_NEW_SESSION    
        SESSION_ID:   Unique alphanumeric sequence value
        REPLY_QUEUE:    Queue name to use for ACK
        ACK_ID: unique sequence number to be returned with response
       
    AR_NEW_SESSION_ACK:
        MSG_TYPE: AR_NEW_SESSION_ACK    
        COMPONENT: AR_FOREMAN
        ACK_BOOL:
        ACK_ID: unique sequence number to be returned with response
       
    ### NEW Version of Start integration
    ## This message uses two list structures to describe which Rafts/CCDs to fetch.
    ## Note: All list items are strings.
    ## This RAFT_LIST is a list with each index value having a different raft name.
    ## The RAFT_CCD_LIST indexes match to the RAFT_LIST in that the Raft name at 
    ## say, index value 2 in the list, refers to index value 2 in the RAFT_CCD_LIST.
    ## Each item in the RAFT_CCD_LIST is a list of CCDs within the associated raft
    ## that should be fetched. The list items in the RAFT_CCD_LIST may contain a
    ## list with one item - the string 'ALL' at index 0. This is to indicate that
    ## all 9 of the CCDs for the raft are to be fetched.
    AR_NEXT_VISIT: 
        MSG_TYPE: AR_NEXT_VISIT
        VISIT_ID:  Issued by a TCS event
        SESSION_ID:    Current Session ID
        JOB_NUM:
        RA:
        DEC:
        ANGLE:
        RAFT_LIST:
        RAFT_CCD_LIST:
        REPLY_QUEUE:    Queue name to use for ACK
        ACK_ID: Unique tag + number from DMCS returned in response

    AR_NEXT_VISIT_ACK: 
        MSG_TYPE: AR_NEXT_VISIT_ACK
        COMPONENT: AR_FOREMAN
        ACK_BOOL:
        ACK_ID: Unique tag + number from DMCS returned in response

    ### DEPRECATED
    AR_START_INTEGRATION:
        MSG_TYPE: AR_START_INTEGRATION
        JOB_NUM: 6    Sequence assigned by DMCS
        IMAGE_ID:
        VISIT_ID:
        SESSION_ID:
        CCD_LIST:    List of CCDs to be fetched and dispatched for this job
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by Base Foreman)

    ### DEPRECATED
    AR_START_INTEGRATION_ACK:
        MSG_TYPE: AR_START_INTEGRATION_ACK
        JOB_NUM:
        SESSION_ID:
        IMAGE_ID:
        VISIT_ID:
        COMPONENT: AR_FOREMAN
        ACK_BOOL:
        ACK_ID:

    AR_TAKE_IMAGES:
        MSG_TYPE: AR_TAKE_IMAGES
        JOB_NUM:
        NUM_IMAGES:
        REPLY_QUEUE:
        ACK_ID:

    AR_TAKE_IMAGES_ACK:
        MSG_TYPE: AR_TAKE_IMAGES_ACK
        COMPONENT: AR_FOREMAN
        ACK_BOOL:
        ACK_ID:

    AR_TAKE_IMAGES_DONE:
        MSG_TYPE: AR_TAKE_IMAGES_DONE
        JOB_NUM:
        REPLY_QUEUE:
        ACK_ID:

    AR_TAKE_IMAGES_DONE_ACK:
        MSG_TYPE: AR_TAKE_IMAGES_DONE_ACK
        JOB_NUM: 6
        COMPONENT:
        ACK_BOOL:
        ACK_ID: (Sequence number as a string generated by Base Foreman)
        RESULT_SET:
            CCD_LIST:
            RECEIPT_LIST:



    AR_END_READOUT:
        MSG_TYPE: AR_READOUT
        JOB_NUM: 6
        IMAGE_ID:
        VISIT_ID:
        SESSION_ID:
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by Base Foreman)

    AR_READOUT_ACK:
        MSG_TYPE: AR_READOUT_ACK
        JOB_NUM: 6
        COMPONENT:
        ACK_BOOL:
        ACK_ID: (Sequence number as a string generated by Base Foreman)
        RESULT_SET:
            CCD_LIST:
            RECEIPT_LIST:


    #Msg # AR1: Archive Health Check from Base Archive Foreman to Archive Controller 

    AR_JOB_PARAMS_ACK: 
        MSG_TYPE: AR_JOB_PARAMS_ACK
        ACK_ID: 

#    AR_READOUT: 
#        MSG_TYPE: AR_READOUT
#        IMAGE_ID: 
#        ACK_ID:
#
#    AR_READOUT_ACK: 
#        MSG_TYPE: AR_READOUT_ACK
#        JOB_NUM: 
#        IMAGE_ID: 
#        REPLY_QUEUE:
#        ACK_ID:
#        RESULTS: 
#            CCD_LIST:
#                FILENAME:
#                CHECKSUM: 



    AR_FWDR_HEALTH_CHECK:
        MSG_TYPE: AR_FWDR_HEALTH_CHECK
        REPLY_QUEUE: 'ar_foreman_ack_publish'
        ACK_ID:

    AR_FWDR_HEALTH_CHECK_ACK:
        MSG_TYPE: AR_FWDR_HEALTH_CHECK_ACK
        COMPONENT:
        ACK_BOOL:
        ACK_ID:

    NEW_ARCHIVE_ITEM:
        MSG_TYPE: NEW_ARCHIVE_ITEM
        JOB_NUM:
        SESSION_ID: num from OCS
        VISIT_ID: num from OCS
        IMAGE_ID: num from OCS
        REPLY_QUEUE: 'ar_foreman_ack_publish'
        ACK_ID: seq. num


    NEW_ARCHIVE_ITEM_ACK:
        MSG_TYPE: NEW_ARCHIVE_ITEM_ACK
        COMPONENT: ARCHIVE_CTRL
        ACK_ID: return seq. number
        TARGET_LOCATION: Path of intended location
        ACK_BOOL: 
        JOB_NUM: 
        IMAGE_ID: 


    AR_FWDR_XFER_PARAMS:
        MSG_TYPE: AR_FWDR_XFER_PARAMS
        JOB_NUM:
        TARGET_LOCATION: Where to put file in archive
        SESSION_ID:
        VISIT_ID:
        DAQ_ADDR: This is tmp until DAQ can support all forwarders - either path or 'API'
        ACK_ID: seq. num
        REPLY_QUEUE:
        XFER_PARAMS:
            AR_FWDR:
            RAFT_LIST: List of rafts fwdr must transfer
            RAFT_CCD_LIST: List of ccd lists, each sub-list showin which CCDs within each raft, or ALL


    AR_FWDR_XFER_PARAMS_ACK:
        MSG_TYPE: AR_FWDR_XFER_PARAMS_ACK
        COMPONENT:
        ACK_ID: seq. num returned

    AR_FWDR_TAKE_IMAGES:
        MSG_TYPE: AR_FWDR_TAKE_IMAGES
        JOB_NUM:
        NUM_IMAGES:
        REPLY_QUEUE:
        ACK_ID:
        # This message is simply a notification for fwder to clean up and prepare...no ack

    AR_END_READOUT:
        MSG_TYPE: AR_END_READOUT
        JOB_NUM:
        IMAGE_ID:
        REPLY_QUEUE:
        ACK_ID:

    AR_FWDR_TAKE_IMAGES_DONE:
        MSG_TYPE: AR_FWDR_TAKE_IMAGES_DONE
        JOB_NUM:
        REPLY_QUEUE:
        ACK_ID:

    AR_FWDR_TAKE_IMAGES_DONE_ACK:
        MSG_TYPE: AR_FWDR_TAKE_IMAGES_DONE_ACK
        JOB_NUM:
        COMPONENT:
        ACK_ID:
        ACK_BOOL:
        RESULT_SET:
            # Add these in when approach to determining losses is result set is determined.
            #RAFT_LIST:
            #RAFT_CCD_LIST:
            #RAFT_PLUS_CCD_LIST: index of ccds in the form raftname-ccdname or 10-22 for example
            FILENAME_LIST: Ordered list of Path plus filename used for the transfer
            CHECKSUM_LIST: Ordered list of File checksum value

    AR_FWDR_END_READOUT:
        MSG_TYPE: AR_FWDR_END_READOUT
        JOB_NUM:
        SESSION_ID:
        VISIT_ID:
        IMAGE_ID:
        REPLY_QUEUE:
        ACK_ID: seq. num


    AR_FWDR_END_READOUT_ACK:
        MSG_TYPE: AR_FWDR_END_READOUT_ACK
        COMPONENT:
        JOB_NUM:
        IMAGE_ID:
        ACK_ID: return seq. num
        ACK_BOOL:
        RESULT_SET:
            CCD_LIST: Ordered list of CCDs - index is shared with lists below 
            FILENAME_LIST: Ordered list of Path plus filename used for the transfer
            CHECKSUM_LIST: Ordered list of File checksum value


    AR_ITEMS_XFERD:
        MSG_TYPE: AR_ITEMS_XFERD
        ACK_ID: seq. num
        REPLY_QUEUE:
        RESULT_SET:
            IMAGE_ID_LIST: Index shared in correspondence with lists below
            FILENAME_LIST: Path plus filename used for the transfer
            CHECKSUM_LIST: File checksum values


    AR_ITEMS_XFERD_ACK:
        MSG_TYPE: AR_ITEMS_XFERD_ACK
        COMPONENT: ARCHIVE_CTRL
        ACK_ID: return seq. number
        ACK_BOOL:
        REPLY_QUEUE:
        RESULT_SET:
          IMAGE_ID_LIST: Index shared in correspondence with lists below
          RECEIPT_LIST: Alphanumeric receipt or 'none' for failure
          FILENAME_LIST:




####################################
### DMCS to AuxDevice and back
### dmcs2at

    AT_NEW_SESSION:
        MSG_TYPE: AT_NEW_SESSION    
        SESSION_ID:   Unique alphanumeric sequence value
        REPLY_QUEUE:    Queue name to use for ACK
        ACK_ID: unique sequence number to be returned with response
       
    AT_NEW_SESSION_ACK:
        MSG_TYPE: AT_NEW_SESSION_ACK    
        COMPONENT: AUX_FOREMAN
        ACK_BOOL:
        ACK_ID: unique sequence number to be returned with response
       
    AT_START_INTEGRATION:
        MSG_TYPE: AT_START_INTEGRATION
        JOB_NUM: 6    Sequence assigned by DMCS
        SESSION_ID:
        IMAGE_ID:
        IMAGE_INDEX:
        IMAGE_SEQUENCE_NAME:
        IMAGES_IN_SEQUENCE:
        RAFT_LIST: WFS_RAFT
        RAFT_CCD_LIST:    WFS_CCD   List of CCDs to be fetched and dispatched for this job
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by Base Foreman)

    AT_START_INTEGRATION_ACK:
        MSG_TYPE: AT_START_INTEGRATION_ACK
        JOB_NUM:
        SESSION_ID:
        COMPONENT: AUX_FOREMAN
        ACK_BOOL:
        ACK_ID:

    AT_END_READOUT:
        MSG_TYPE: AT_END_READOUT
        JOB_NUM: 6
        IMAGE_ID:
        IMAGE_INDEX:
        IMAGE_SEQUENCE_NAME:
        IMAGES_IN_SEQUENCE:
        SESSION_ID:
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by Base Foreman)

    AT_END_READOUT_ACK:
        MSG_TYPE: AT_END_READOUT_ACK
        JOB_NUM: 6
        IMAGE_ID:
        COMPONENT:
        ACK_BOOL:
        ACK_ID: (Sequence number as a string generated by Base Foreman)
        RESULT_SET:
            FILENAME_LIST:
            RECEIPT_LIST:

    AT_HEADER_READY:
        MSG_TYPE: AT_HEADER_READY
        IMAGE_ID:
        FILENAME:
        ACK_ID:
        REPLY_QUEUE:

    AT_HEADER_READY_ACK:
        MSG_TYPE: AT_HEADER_READY_ACK
        COMPONENT:
        ACK_ID:
        ACK_BOOL:

    AT_FWDR_HEALTH_CHECK:
        MSG_TYPE: AT_FWDR_HEALTH_CHECK
        REPLY_QUEUE: 'at_foreman_ack_publish'
        ACK_ID:

    AT_FWDR_HEALTH_CHECK_ACK:
        MSG_TYPE: AT_FWDR_HEALTH_CHECK_ACK
        COMPONENT:
        ACK_BOOL:
        ACK_ID:

    NEW_ARCHIVE_ITEM:
        MSG_TYPE: NEW_ARCHIVE_ITEM
        JOB_NUM:
        SESSION_ID: num from OCS
        VISIT_ID: num from OCS
        IMAGE_ID: num from OCS
        REPLY_QUEUE: 'at_foreman_ack_publish'
        ACK_ID: seq. num


    NEW_ARCHIVE_ITEM_ACK:
        MSG_TYPE: NEW_ARCHIVE_ITEM_ACK
        COMPONENT: ARCHIVE_CTRL
        ACK_ID: return seq. number
        TARGET_LOCATION: Path of intended location
        ACK_BOOL: 
        JOB_NUM: 
        IMAGE_ID: 


    AT_FWDR_XFER_PARAMS:
        MSG_TYPE: AT_FWDR_XFER_PARAMS
        JOB_NUM:
        TARGET_LOCATION: Where to put file in archive
        SESSION_ID:
        ACK_ID: seq. num
        REPLY_QUEUE:
        XFER_PARAMS:
            AT_FWDR:
            RAFT_LIST: List of rafts fwdr must transfer
            RAFT_CCD_LIST: List of ccd lists, each sub-list showin which CCDs within each raft, or ALL


    AT_FWDR_XFER_PARAMS_ACK:
        MSG_TYPE: AT_FWDR_XFER_PARAMS_ACK
        COMPONENT:
        ACK_BOOL:
        ACK_ID: seq. num returned

    AT_FWDR_END_READOUT:
        MSG_TYPE: AT_FWDR_END_READOUT
        JOB_NUM:
        SESSION_ID:
        IMAGE_ID:
        IMAGE_INDEX:
        IMAGE_SEQUENCE_NAME:
        IMAGES_IN_SEQUENCE:
        REPLY_QUEUE:
        ACK_ID:

    AT_FWDR_END_READOUT_ACK:
        MSG_TYPE: AT_FWDR_END_READOUT_ACK
        COMPONENT:
        JOB_NUM:
        SESSION_ID:
        IMAGE_ID:
        ACK_ID: return seq. num
        ACK_BOOL:
        RESULT_SET:
            FILENAME_LIST: Ordered list of Path plus filename used for the transfer
            CHECKSUM_LIST: Ordered list of File checksum value

    AT_FWDR_HEADER_READY:
        MSG_TYPE: AT_FWDR_HEADER_READY
        IMAGE_ID:
        FILENAME:
        ACK_ID:
        REPLY_QUEUE:

    AT_FWDR_HEADER_READY_ACK:
        MSG_TYPE: AT_FWDR_HEADER_READY_ACK
        COMPONENT:
        ACK_ID:
        ACK_BOOL:

    AT_ITEMS_XFERD:
        MSG_TYPE: AT_ITEMS_XFERD
        ACK_ID: seq. num
        REPLY_QUEUE:
        RESULT_SET:
            FILENAME_LIST: Path plus filename used for the transfer
            CHECKSUM_LIST: File checksum values

    AT_ITEMS_XFERD_ACK:
        MSG_TYPE: AT_ITEMS_XFERD_ACK
        COMPONENT: ARCHIVE_CTRL
        ACK_ID: return seq. number
        ACK_BOOL:
        REPLY_QUEUE:
        RESULT_SET:
          RECEIPT_LIST: Alphanumeric receipt or 'none' for failure
          FILENAME_LIST:


### DMCS to PP Foreman and Back

### DMCS to PP Foreman and Back
###############################


    PP_NEW_SESSION:
        MSG_TYPE: PP_NEW_SESSION    
        SESSION_ID:   Unique alphanumeric sequence value
        REPLY_QUEUE:    Queue name to use for ACK
        ACK_ID: unique sequence number to be returned with response

    PP_NEW_SESSION_ACK:
        MSG_TYPE: PP_NEW_SESSION_ACK
        COMPONENT: PROMPT_PROCESS_FOREMAN
        ACK_BOOL:
        ACK_ID:
       
    PP_NEXT_VISIT: 
        MSG_TYPE: PP_NEXT_VISIT
        VISIT_ID:  Issued by a TCS event
        SESSION_ID:    Current Session ID
        RA:
        DEC:
        ANGLE:
        REPLY_QUEUE:    Queue name to use for ACK
        ACK_ID: Unique tag + number from DMCS returned in response

    PP_NEXT_VISIT_ACK:
        MSG_TYPE: PP_NEXT_VISIT_ACK
        COMPONENT: PROMPT_PROCESS_FOREMAN
        ACK_BOOL:
        ACK_ID:
       
    PP_START_INTEGRATION:
        MSG_TYPE: PP_START_INTEGRATION
        JOB_NUM: 6    Sequence assigned by DMCS
        IMAGE_ID:
        VISIT_ID:
        SESSION_ID:
        CCD_LIST:    List of CCDs to be fetched and dispatched for this job
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by Base Foreman)

    PP_START_INTEGRATION_ACK:
        MSG_TYPE: PP_START_INTEGRATION_ACK
        JOB_NUM:
        COMPONENT: PROMPT_PROCESS_FOREMAN
        ACK_BOOL:
        ACK_ID:
      
    ## This message uses two list structures to describe which Rafts/CCDs to fetch.
    ## Note: All list items are strings.
    ## This RAFT_LIST is a list with each index value having a different raft name.
    ## The RAFT_CCD_LIST indexes match to the RAFT_LIST in that the Raft name at 
    ## say, index value 2 in the list, refers to index value 2 in the RAFT_CCD_LIST.
    ## Each item in the RAFT_CCD_LIST is a list of CCDs within the associated raft
    ## that should be fetched. The list items in the RAFT_CCD_LIST may contain a
    ## list with one item - the string 'ALL' at index 0. This is to indicate that
    ## all 9 of the CCDs for the raft are to be fetched.
    PP_TAKE_IMAGES:
        MSG_TYPE: PP_TAKE_IMAGES
        JOB_NUM: 6    Sequence assigned by DMCS
        VISIT_ID:
        SESSION_ID:
        RAFT_LIST:    List of RAFTs to be fetched and dispatched for this job
        RAFT_CCD_LIST:    List of CDs per raft, or ALL if all should be fetched (typical case)
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by Base Foreman)

    PP_TAKE_IMAGES_ACK:
        MSG_TYPE: PP_TAKE_IMAGES_ACK
        JOB_NUM:
        COMPONENT: PROMPT_PROCESS_FOREMAN
        ACK_BOOL:
        ACK_ID:
       
    PP_READOUT:
        MSG_TYPE: PP_READOUT
        JOB_NUM: 6
        IMAGE_ID:
        VISIT_ID:
        SESSION_ID:
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by Base Foreman)

    PP_READOUT_ACK:
        MSG_TYPE: PP_READOUT_ACK
        COMPONENT:
        JOB_NUM:
        ACK_BOOL:
        ACK_ID:

        
    # Prompt Processing Foreman to/from Forwarder Messages

    PP_FWDR_HEALTH_CHECK:        
        MSG_TYPE: PP_FWDR_HEALTH_CHECK
        JOB_NUM: 6
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by PP Foreman)

    PP_FWDR_HEALTH_CHECK_ACK:
        MSG_TYPE: PP_FWDR_HEALTH_CHECK_ACK
        JOB_NUM: 6
        COMPONENT: (FQN of Forwarder answering...such as 'FORWARDER_3')
        ACK_BOOL: True
        ACK_ID: (Sequence number as a string generated by Base Foreman returned...)

    PP_FWDR_XFER_PARAMS:
        MSG_TYPE: PP_FWDR_XFER_PARAMS
        JOB_NUM: 6
        IMAGE_ID:
        VISIT_ID:
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by Base Foreman)
        XFER_PARAMS:  
            CCD_LIST: 
            DISTRIBUTOR:
                FQN: Distributor_1
                HOSTNAME: D1
                IP_ADDR: 141.142.237.161
                NAME: D1
                TARGET_DIR: /dev/null

    PP_FWDR_XFER_PARAMS_ACK:
        MSG_TYPE: PP_FWDR_XFER_PARAMS_ACK
        JOB_NUM: 6
        COMPONENT: (FQN of Forwarder answering...such as 'FORWARDER_3')
        ACK_BOOL: True
        ACK_ID: (Sequence number as a string generated by Base Foreman returned...)

    PP_FWDR_READOUT:
        MSG_TYPE: PP_FWDR_READOUT
        JOB_NUM: 6
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by Base Foreman)

    PP_FWDR_READOUT_ACK:
        MSG_TYPE: PP_FWDR_READOUT_ACK
        JOB_NUM: 6
        COMPONENT: (FQN of Forwarder answering...such as 'FORWARDER_3')
        ACK_BOOL: TRUE
        ACK_ID:  A string formed from Base Foreman's sequence number returned...



    NCSA_NEW_SESSION:
        MSG_TYPE: NCSA_NEW_SESSION    
        SESSION_ID:   Unique alphanumeric sequence value
        REPLY_QUEUE:    Queue name to use for ACK
        ACK_ID: unique sequence number to be returned with response
       
    NCSA_NEW_SESSION_ACK:
        MSG_TYPE: NCSA_NEW_SESSION_ACK 
        COMPONENT: 'NCSA_FOREMAN'
        ACK_BOOL:
        ACK_ID: unique sequence number to be returned with response
       
    NCSA_NEXT_VISIT:
        MSG_TYPE: NCSA_NEXT_VISIT
        VISIT_ID:  Sequence number derived by TCS
        SESSION_ID:    Current Session ID
        RA:
        DEC:
        ANGLE:
        REPLY_QUEUE:    Queue name to use for ACK
        ACK_ID: Unique number from PP Foreman to be returned in response
        
    NCSA_NEXT_VISIT_ACK:
        MSG_TYPE: NCSA_NEXT_VISIT_ACK
        COMPONENT: 'NCSA_FOREMAN'
        ACK_BOOL:
        ACK_ID: Unique number from PP Foreman to be returned in response
        
    NCSA_START_INTEGRATION:
        MSG_TYPE: NCSA_START_INTEGRATION
        JOB_NUM: 6
        IMAGE_ID:
        VISIT_ID:
        SESSION_ID:
        REPLY_QUEUE:
        ACK_ID: (Sequence number generated by Base Foreman)
        FORWARDERS: 
            FORWARDER_LIST: 
            CCD_LIST: # A list of lists, each main list index refers to the same index on FORWARDER_LIST.

    NCSA_START_INTEGRATION_ACK:
        MSG_TYPE: NCSA_START_INTEGRATION_ACK
        JOB_NUM: 6
        VISIT_ID:
        IMAGE_ID:
        SESSION_ID:
        COMPONENT: NCSA_FOREMAN
        ACK_BOOL: (TRUE if resources are available -  FALSE if insufficient resources)
        ACK_ID: Sequence number in string form chosen by the Base Foreman and returned here.
        PAIRS: #A list of dictionaries
            #When testing via pytest, dictionaries below are sent one at a time to check shape
            #with a special entry in this list called PAIRS, as the number of forwarders will vary
            #
            #FORWARDER: FORWARDER_1
            #CCD_LIST:
            #DISTRIBUTOR:
            #    FQN: 
            #    HOSTNAME:
            #    IP_ADDR: 
            #    NAME: 
            #    TARGET_DIR: 
            #
            #FORWARDER: FORWARDER_2
            #CCD_LIST: 
            #DISTRIBUTOR:
            #    FQN: 
            #    HOSTNAME:
            #    IP_ADDR:
            #    NAME: 
            #    TARGET_DIR:

    # Used for checking a part of the NCSA_START_INTEGRATION_ACK message above
    # This dictionary is a subset of another message - not a complete message 
    # in its own right.
    PAIR:
        MSG_TYPE: PAIR
        FORWARDER:
        CCD_LIST:
        DISTRIBUTOR:
            FQN:
            HOSTNAME:
            IP_ADDR:
            NAME:
            TARGET_DIR:
    

    NCSA_READOUT:
        MSG_TYPE: NCSA_READOUT
        VISIT_ID:
        JOB_NUM:
        SESSION_ID:
        IMAGE_ID:
        REPLY_QUEUE:
        ACK_ID:

    NCSA_READOUT_ACK:
        MSG_TYPE: NCSA_READOUT_ACK
        VISIT_ID:
        JOB_NUM:
        SESSION_ID:
        IMAGE_ID:
        COMPONENT: NCSA_FOREMAN
        ACK_BOOL:
        ACK_ID:
        RESULT_SET:
            CCD_LIST:
            RECEIPT_LIST:

        
        
#   NCSA Foreman Messages to/from Distributors

    DISTRIBUTOR_HEALTH_CHECK: 
        MSG_TYPE: DISTRIBUTOR_HEALTH_CHECK
        JOB_NUM: 6
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by NCSA Foreman)

    DISTRIBUTOR_HEALTH_CHECK_ACK:
        MSG_TYPE: DISTRIBUTOR_HEALTH_CHECK_ACK
        JOB_NUM: 6
        COMPONENT: (FQN of Distributor answering...such as 'DISTRIBUTOR_7')
        ACK_BOOL: 
        ACK_ID:  

    DISTRIBUTOR_XFER_PARAMS:
        MSG_TYPE: DISTRIBUTOR_XFER_PARAMS
        JOB_NUM: 6
        VISIT_ID:
        IMAGE_ID:
        REPLY_QUEUE:
        ACK_ID: (Sequence number as a string generated by Base Foreman)
        XFER_PARAMS:
                FORWARDER:
                CCD_LIST:
                DISTRIBUTOR:
                        FQN:
                        NAME:
                        HOSTNAME:
                        IP_ADDR:
                        TARGET_DIR: 

    DISTRIBUTOR_XFER_PARAMS_ACK:
        MSG_TYPE: DISTRIBUTOR_XFER_PARAMS_ACK
        JOB_NUM: 6
        COMPONENT:
        ACK_BOOL:
        ACK_ID: (Sequence number as a string generated by Base Foreman)

    DISTRIBUTOR_READOUT:
        MSG_TYPE: DISTRIBUTOR_READOUT
        JOB_NUM: 6
        REPLY_QUEUE: 'ncsa_foreman_ack_publish'
        ACK_ID: Unique sequence number appended to string for each timed ACK event

    DISTRIBUTOR_READOUT_ACK:
        MSG_TYPE: DISTRIBUTOR_READOUT_ACK
        JOB_NUM: 6
        COMPONENT: (FQN of Distributor answering...such as 'DISTRIBUTOR_2')
        ACK_BOOL: TRUE
        ACK_ID:  A string formed from Base Foreman's sequence number returned...
        RESULT_SET:
            CCD_LIST: 
            RECEIPT_LIST: Alphanumeric receipt or 'none' for failure

    # -------------------------------------------------------------------------------

    CCS_START_INTEGRATION: 
        MSG_TYPE: CCS_START_INTEGRATION 
        IMAGE_NAME: 

    CCS_START_READOUT: 
        MSG_TYPE: CCS_START_READOUT

    CCS_END_READOUT: 
        MSG_TYPE: CCS_END_READOUT

    CCS_START_SHUTTER_CLOSE: 
        MSG_TYPE: CCS_START_SHUTTER_CLOSE

    CCS_START_SHUTTER_OPEN: 
        MSG_TYPE: CCS_START_SHUTTER_OPEN

    CCS_END_SHUTTER_CLOSE: 
        MSG_TYPE: CCS_END_SHUTTER_CLOSE

    CCS_END_SHUTTER_OPEN: 
        MSG_TYPE: CCS_END_SHUTTER_OPEN

    CCS_TAKE_IMAGES: 
        MSG_TYPE: CCS_TAKE_IMAGES
        NUM_IMAGES:  Integer
        EXP_TIME: exposure time
        SHUTTER: 
        SCIENCE: Bool
        GUIDE: Bool
        WFS: Bool
        IMAGE_SEQUENCE_NAME: 

    TCS_TARGET:
        MSG_TYPE: TCS_TARGET
        TARGET_ID: 
        FIELD_ID: 
        GROUP_ID:
        FILTER:
        REQUEST_TIME:
        RA: 
        DEC: 
        ANGLE: 
        NUM_EXPOSURES: 
        EXPOSURE_TIMES: 
        SLEW_TIME: 

    TAKE_IMAGE_DONE:
        MSG_TYPE: TAKE_IMAGE_DONE

    TARGET_VISIT_DONE: 
        MSG_TYPE: TARGET_VISIT_DONE

    TARGET_VISIT_ACCEPT:
        MSG_TYPE: TARGET_VISIT_ACCEPT

    END_READOUT:
        MSG_TYPE: END_READOUT
        IMAGE_NAME:

    #----------------------------------------------------------------------------
    # Each Forwarder component consists of s primary component 
    # which communicates with the Foreman (device).
    # The Primary Forwarwder component is made up three sub-components.
    # These sub-components communicate with the Primary Forwarder Component.
    # The sub-componets are:
    #  a. The fetch sub-component fetches image data from DAQ.
    #  b. The format sub-component joins EFD data and image data into Fits files.
    #  c. The forward sub-component moves the Fits file to its final destination.

    AR_NEW_VISIT:
        MSG_TYPE: AR_NEW_VISIT
        REPLY_QUEUE:
        ACK_ID:

    PP_NEW_VISIT:
        MSG_TYPE: PP_NEW_VISIT
        REPLY_QUEUE:
        ACK_ID:

    SP_NEW_VISIT:
        MSG_TYPE: SP_NEW_VISIT
        REPLY_QUEUE:
        ACK_ID:

    AR_FWDR_HEALTH_CHECK:
        MSG_TYPE: AR_FWDR_HEALTH_CHECK
        RAFT:
        REPLY_QUEUE:
        ACK_ID:

    PP_FWDR_HEALTH_CHECK:
        MSG_TYPE: PP_FWDR_HEALTH_CHECK
        RAFT:
        REPLY_QUEUE:
        ACK_ID:

    SP_FWDR_HEALTH_CHECK:
        MSG_TYPE: SP_FWDR_HEALTH_CHECK
        RAFT:
        REPLY_QUEUE:
        ACK_ID:

    PP_TAKE_IMAGE:
        MSG_TYPE: PP_TAKE_IMAGE
        REPLY_QUEUE:
        ACK_ID:

    SP_TAKE_IMAGE:
        MSG_TYPE: SP_TAKE_IMAGE
        REPLY_QUEUE:
        ACK_ID:

    AR_END_READOUT:
        MSG_TYPE: AR_END_READOUT
        JOB_NUM:
        IMAGE_ID:
        REPLY_QUEUE:
        ACK_ID:

    PP_END_READOUT:
        MSG_TYPE: PP_END_READOUT
        IMAGE_ID:
        REPLY_QUEUE:
        ACK_ID:

    SP_END_READOUT:
        MSG_TYPE: SP_END_READOUT
        REPLY_QUEUE:
        ACK_ID:


    #----------------------------------------------------------


    AR_FETCH:
        MSG_TYPE: AR_FETCH
        REPLY_QUEUE:

    PP_FETCH:
        MSG_TYPE: PP_FETCH
        CROSSTALK_KEY:
        REPLY_QUEUE:

    SP_FETCH:
        MSG_TYPE: SP_FETCH
        REPLY_QUEUE:

    AR_FORMAT:
        MSG_TYPE: AR_FORMAT
        HEADER_LOCATION:
        REPLY_QUEUE:

    PP_FORMAT:
        MSG_TYPE: PP_FORMAT
        HEADER_LOCATION:
        REPLY_QUEUE:

    SP_FORMAT:
        MSG_TYPE: SP_FORMAT
        HEADER_LOCATION:
        REPLY_QUEUE:

    AR_FORWARD:
        MSG_TYPE: AR_FOWARDR
        DESTINATION:
        REPLY_QUEUE:

    PP_FORWARD:
        MSG_TYPE: PP_FORWARD
        DESTINATION:
        REPLY_QUEUE:

    SP_FORWARD:
        MSG_TYPE: SP_FORWARD
        DESTINATION:
        REPLY_QUEUE:


